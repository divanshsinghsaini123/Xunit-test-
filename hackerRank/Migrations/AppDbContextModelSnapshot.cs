// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HackerRank.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HackerRank.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("HackerRank.Models.QuestionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswerControlType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CorrectOption")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasImage")
                        .HasColumnType("boolean");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsOption1Image")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOption2Image")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOption3Image")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOption4Image")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOption5Image")
                        .HasColumnType("boolean");

                    b.Property<string>("Option1Image")
                        .HasColumnType("text");

                    b.Property<string>("Option1Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Option2Image")
                        .HasColumnType("text");

                    b.Property<string>("Option2Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Option3Image")
                        .HasColumnType("text");

                    b.Property<string>("Option3Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Option4Image")
                        .HasColumnType("text");

                    b.Property<string>("Option4Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Option5Image")
                        .HasColumnType("text");

                    b.Property<string>("Option5Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SectionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("HackerRank.Models.SectionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("HackerRank.Models.TestModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TimeAllowed")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("HackerRank.Models.TestQuestionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<int>("TestId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("TestId");

                    b.ToTable("TestQuestions");
                });

            modelBuilder.Entity("HackerRank.Models.QuestionModel", b =>
                {
                    b.HasOne("HackerRank.Models.SectionModel", "Section")
                        .WithMany("Questions")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("HackerRank.Models.TestModel", b =>
                {
                    b.HasOne("HackerRank.Models.Admin", "Admin")
                        .WithMany("Tests")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("HackerRank.Models.TestQuestionModel", b =>
                {
                    b.HasOne("HackerRank.Models.QuestionModel", "Question")
                        .WithMany("TestQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HackerRank.Models.TestModel", "Test")
                        .WithMany("TestQuestions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("HackerRank.Models.Admin", b =>
                {
                    b.Navigation("Tests");
                });

            modelBuilder.Entity("HackerRank.Models.QuestionModel", b =>
                {
                    b.Navigation("TestQuestions");
                });

            modelBuilder.Entity("HackerRank.Models.SectionModel", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("HackerRank.Models.TestModel", b =>
                {
                    b.Navigation("TestQuestions");
                });
#pragma warning restore 612, 618
        }
    }
}
