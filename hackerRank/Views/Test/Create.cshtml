@model HackerRank.Models.TestModel

@{
    ViewData["Title"] = "Create Test";
}

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-body">
                    <h3 class="card-title mb-4">Create New Test</h3>
                    <form id="createTestForm" method="post">
                        @Html.AntiForgeryToken()
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                        <div class="mb-3">
                            <label asp-for="TestName" class="form-label">Test Name</label>
                            <input asp-for="TestName" class="form-control" required />
                        </div>

                        <div class="mb-3">
                            <label asp-for="TestDate" class="form-label">Test Date</label>
                            <input asp-for="TestDate" type="date" class="form-control" required />
                        </div>

                        <div class="mb-3">
                            <label asp-for="TimeAllowed" class="form-label">Time Allowed (minutes)</label>
                            <input asp-for="TimeAllowed" type="number" class="form-control" required />
                        </div>

                        <input type="hidden" asp-for="AdminId" value="@User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value" />

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary">Create Test</button>
                            <a asp-controller="Home" asp-action="Dashboard" class="btn btn-outline-secondary">Back to Dashboard</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.getElementById('createTestForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const testData = {
                id : 0,
                testName: document.querySelector('[name="TestName"]').value,
                testDate: new Date(document.querySelector('[name="TestDate"]').value).toISOString(),
                timeAllowed: parseInt(document.querySelector('[name="TimeAllowed"]').value),
                adminId:  parseInt(document.querySelector('[name="AdminId"]').value)
            };
                
            try {
                const response = await fetch('@Url.Action("Create")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(testData)
                });

                if (response.ok) {
                        const result = await response.json();
                        const testId = result.testId;
                        window.location.href = `/Test/ShowSections?testId=${testId}`;

                } else {
                     throw new Error('Server error: ' + response.status);
                } 
                
            } catch (error) {
                console.error('Error:', error);
                alert('An error occurred while creating the test.');
            }
        });
    </script>
}