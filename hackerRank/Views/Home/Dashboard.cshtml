@model List<HackerRank.Models.TestModel> ;
@{
    ViewData["Title"] = "Dashboard";
}

<div class="container-fluid">
    <div class="row">
        <!-- Sidebar -->
        <partial name="_DashboardSidebar" />
        
        <!-- Main Content -->
        <div class="col-md-9 col-lg-10 p-3">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Tests</h2>
                <div>
                    <a href="@Url.Action("Create", "Test")" class="btn btn-primary">
                        <i class="bi bi-file-earmark-plus"></i> Add Test
                    </a>
                </div>
            </div>

            <!-- List of Tests -->
            <div class="row" id="sectionList">
                @foreach (var sectionItem in Model )
                {
                    <div class="col-md-4 mb-4">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">@sectionItem.TestName</h5>
                                <p class="card-text">
                                    <small class="text-muted">@sectionItem.TestDate</small>
                                </p>
                                <p class="card-text">
                                    <small class="text-muted">Duration: @sectionItem.TimeAllowed</small>
                                </p>
                                <div class="d-flex justify-content-between">
                                    <a asp-controller="Test" asp-action="Details" asp-route-id="@sectionItem.Id" 
                                       class="btn btn-primary">View Test</a>
                                    <form asp-controller="Test" asp-action="Delete" asp-route-id="@sectionItem.Id" method="post"
                                          onsubmit="return confirm('Are you sure you want to delete this test? This action cannot be undone.');">
                                        @Html.AntiForgeryToken()
                                        <button type="submit" class="btn btn-danger">Delete</button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Add Section Modal -->
<div class="modal fade" id="addSectionModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Section</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addSectionForm">
                    <div class="mb-3">
                        <label for="sectionName" class="form-label">Section Name</label>
                        <input type="text" class="form-control" id="sectionName" name="sectionName" required>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Add Section</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const antiforgeryToken = document.querySelector('input[name="__RequestVerificationToken"]')?.value;

        // Handle delete form submissions
        document.querySelectorAll('form[asp-action="Delete"]').forEach(form => {
            form.addEventListener('submit', async function(e) {
                e.preventDefault();
                if (!confirm('Are you sure you want to delete this test? This action cannot be undone.')) {
                    return;
                }

                try {
                    const response = await fetch(this.action, {
                        method: 'POST',
                        headers: {
                            'RequestVerificationToken': antiforgeryToken
                        }
                    });

                    if (response.ok) {
                        // Remove the card from the UI
                        this.closest('.col-md-4').remove();
                    } else {
                        alert('Failed to delete test. Please try again.');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('An error occurred while deleting the test.');
                }
            });
        });

        document.getElementById('addSectionForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            const sectionName = document.getElementById('sectionName').value;
            
            try {
                const response = await fetch('/Section/Create', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': antiforgeryToken
                    },
                    body: JSON.stringify({ name: sectionName })
                });

                if (response.ok) {
                    window.location.href = '/Home/Dashboard';
                } else {
                    alert('Failed to create section. Please try again.');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('An error occurred while creating the section.');
            }
        });

       
    </script>
}
